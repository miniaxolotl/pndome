datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model File {

  fileId String @id @unique @db.VarChar(16)

  folderId String @db.VarChar(16)

  name String @db.VarChar(255)

  type String @db.VarChar(32)

  ext String @db.VarChar(32)

  bytes Int @db.UnsignedInt

  sha256 String @db.VarChar(64)

  md5 String @db.VarChar(32)

  dCount Int @db.UnsignedInt

  vCount Int @db.UnsignedInt

  created DateTime @default(now())

  deleted Boolean @default(false)

  folder Folder @relation(fields: [folderId], references: [folderId])

  @@index([fileId, folderId])
}

model Folder {

  folderId String @id @db.VarChar(16)

  userId String @db.VarChar(16)

  name String @db.VarChar(255)

  password String @db.VarChar(255)

  protected Boolean @default(true)

  dCount Int @db.UnsignedInt

  vCount Int @db.UnsignedInt

  created DateTime @default(now()) @db.Timestamp

  files File[]

  users User @relation(fields: [userId], references: [userId])

}

model Role {

  roleId String @id @unique @db.VarChar(16)

  authority Int @unique @db.UnsignedTinyInt

  users UserRole[]

}

model User {

  userId String @id @db.VarChar(16)

  username String @unique @db.VarChar(255)

  password String @db.VarChar(255)

  email String @unique @db.VarChar(255)

  created DateTime @default(now()) @db.Timestamp

  roles UserRole[]

  folders Folder[]

  sessions Session[]

  tokens Token[]

}

model Client {

  clientId String @id @db.VarChar(255)

  clientSecret String @unique @db.VarChar(16)

  redirectUri String @db.VarChar(255)

  scope String @db.VarChar(255)

  created DateTime @default(now()) @db.Timestamp

  disabled Boolean @default(false)

  @@index([clientId, clientSecret])
}

model Session {

  sessionId String @id @db.VarChar(64)

  userId String @db.VarChar(16)

  valid Boolean @default(true)

  created DateTime @default(now()) @db.Timestamp

  expires DateTime @db.Timestamp

  users User @relation(fields: [userId], references: [userId])

  @@index([sessionId, userId])
}

model Token {

  tokenId String @id @db.VarChar(255)

  userId String @db.VarChar(16)

  valid Boolean @default(true)

  created DateTime @default(now()) @db.Timestamp

  expires DateTime @db.Timestamp

  users User @relation(fields: [userId], references: [userId])

  @@index([tokenId, userId])
}

model UserRole {

  id Int @id @default(autoincrement())

  roleId String @db.VarChar(16)

  userId String @db.VarChar(16)

  created DateTime @default(now()) @db.Timestamp

  role Role? @relation(fields: [roleId], references: [roleId])

  user User? @relation(fields: [userId], references: [userId])

  @@unique([roleId, userId])
}
